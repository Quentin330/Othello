; 0 si vide
; 1 si blanc
; 2 si noir
; 3 si triche
; 6 si la famille

; cree le tableau du debut de la partie
(defun init-tab()
  (make-array '(8 8) :initial-contents
	      '((0 0 0 0 0 0 0 0)
		(0 0 0 0 0 0 0 0)
		(0 0 0 0 0 0 0 0)
		(0 0 0 1 2 0 0 0)
		(0 0 0 2 1 0 0 0)
		(0 0 0 0 0 0 0 0)
		(0 0 0 0 0 0 0 0)
		(0 0 0 0 0 0 0 0))))

; affiche le tableau
(defun show-tab(tab)
  (dotimes (i 8)
    (dotimes (j 8)
      (format t "~2D"
	      (aref tab j i)))
    (format t "~%"))
  (format t "~%"))

(defparameter a1 '(0 0))
(defparameter a2 '(0 1))
(defparameter a3 '(0 2))
(defparameter a4 '(0 3))
(defparameter a5 '(0 4))
(defparameter a6 '(0 5))
(defparameter a7 '(0 6))
(defparameter a8 '(0 7))
(defparameter b1 '(1 0))
(defparameter b2 '(1 1))
(defparameter b3 '(1 2))
(defparameter b4 '(1 3))
(defparameter b5 '(1 4))
(defparameter b6 '(1 5))
(defparameter b7 '(1 6))
(defparameter b8 '(1 7))
(defparameter c1 '(2 0))
(defparameter c2 '(2 1))
(defparameter c3 '(2 2))
(defparameter c4 '(2 3))
(defparameter c5 '(2 4))
(defparameter c6 '(2 5))
(defparameter c7 '(2 6))
(defparameter c8 '(2 7))
(defparameter d1 '(3 0))
(defparameter d2 '(3 1))
(defparameter d3 '(3 2))
(defparameter d4 '(3 3))
(defparameter d5 '(3 4))
(defparameter d6 '(3 5))
(defparameter d7 '(3 6))
(defparameter d8 '(3 7))
(defparameter e1 '(4 0))
(defparameter e2 '(4 1))
(defparameter e3 '(4 2))
(defparameter e4 '(4 3))
(defparameter e5 '(4 4))
(defparameter e6 '(4 5))
(defparameter e7 '(4 6))
(defparameter e8 '(4 7))
(defparameter f1 '(5 0))
(defparameter f2 '(5 1))
(defparameter f3 '(5 2))
(defparameter f4 '(5 3))
(defparameter f5 '(5 4))
(defparameter f6 '(5 5))
(defparameter f7 '(5 6))
(defparameter f8 '(5 7))
(defparameter g1 '(6 0))
(defparameter g2 '(6 1))
(defparameter g3 '(6 2))
(defparameter g4 '(6 3))
(defparameter g5 '(6 4))
(defparameter g6 '(6 5))
(defparameter g7 '(6 6))
(defparameter g8 '(6 7))
(defparameter h1 '(7 0))
(defparameter h2 '(7 1))
(defparameter h3 '(7 2))
(defparameter h4 '(7 3))
(defparameter h5 '(7 4))
(defparameter h6 '(7 5))
(defparameter h7 '(7 6))
(defparameter h8 '(7 7))


; boolean
(defun coup-valide(tab joueur x y)
  (if (case-vide tab x y)
      (if (or (prise-possible-droite tab joueur x y)
	      (prise-possible-bas-droite tab joueur x y)
	      (prise-possible-bas tab joueur x y)
	      (prise-possible-bas-gauche tab joueur x y)
	      (prise-possible-gauche tab joueur x y)
	      (prise-possible-haut-gauche tab joueur x y)
	      (prise-possible-haut tab joueur x y)
	      (prise-possible-haut-droite tab joueur x y))
	  T
	  NIL)
      NIL))

(defun adversaire (joueur)
  (if (= joueur 1)
      2
      1))

(defun case-vide (tab x y)
  (if (or (zerop y) (zerop x) (< x 8) (< y 8)) ;; si on est dans le tableau
      (if (= 0 (aref tab x y)) ;; si la case est vide
	  T
	  NIL)
      NIL))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;   PRISES POSSIBLES !!
;;;

(defun prise-possible-droite (tab joueur x y)
      (if (< x 6)
	  (if (= (adversaire joueur) (aref tab (+ x 1) y))
	      (do ((i (+ 1 x) (+ 1 i)))((= 7 i))
		(if (= (aref tab i y) joueur)
		    (return T)
		    (if (case-vide tab i y)
			NIL)))
	      NIL)
	  NIL))


(defun prise-possible-gauche (tab joueur x y)
      (if (> x 1)
	  (if (= (adversaire joueur) (aref tab (- x 1) y))
	      (do ((i (- x 1) (- i 1)))((= 0 i))
		(if (= (aref tab i y) joueur)
		    (return T)
		    (if (case-vide tab i y)
			NIL)))
	      NIL)
	  NIL))

(defun prise-possible-haut (tab joueur x y)
      (if (> y 1)
	  (if (= (adversaire joueur) (aref tab x (- y 1)))
	      (do ((i (- y 1) (- i 1)))((= 0 i))
		(if (= (aref tab x i) joueur)
		    (return T)
		    (if (case-vide tab x i)
			NIL)))
	      NIL)
	  NIL))

(defun prise-possible-bas (tab joueur x y)
      (if (< y 6)
	  (if (= (adversaire joueur) (aref tab x (+ y 1)))
	      (do ((i (+ 1 y) (+ i 1)))((= 7 i))
		(if (= (aref tab x i) joueur)
		    (return T)
		    (if (case-vide tab x i)
			NIL)))
	      NIL)
	  NIL))

(defun prise-possible-bas-droite (tab joueur x y)
      (if (and (< y 6) (< x 6))
	  (if (= (adversaire joueur) (aref tab (+ x 1) (+ y 1)))
	      (do ((i (+ 1 x) (+ i 1))(j (+ 1 y) (+ j 1)))
		  ((or (= 7 i) (= 7 j)))
		(if (= (aref tab i j) joueur)
		    (return T)
		    (if (case-vide tab i j)
			NIL)))
	      NIL)
	  NIL))

(defun prise-possible-bas-gauche (tab joueur x y)
      (if (and (< y 6) (> x 1))
	  (if (= (adversaire joueur) (aref tab (- x 1) (+ y 1)))
	      (do ((i (- x 1) (- i 1))(j (+ y 1) (+ j 1)))
		  ((or (= 0 i) (= 7 j)))
		(if (= (aref tab i j) joueur)
		    (return T)
		    (if (case-vide tab i j)
			NIL)))
	      NIL)
	  NIL))

(defun prise-possible-haut-gauche (tab joueur x y)
      (if (and (> y 1) (> x 1))
	  (if (= (adversaire joueur) (aref tab (- x 1) (- y 1)))
	      (do ((i (- x 1) (- i 1))(j (- y 1) (- j 1)))
		  ((or (= 0 i) (= 0 j)))
		(if (= (aref tab i j) joueur)
		    (return T)
		    (if (case-vide tab i j)
			NIL)))
	      NIL)
	  NIL))

(defun prise-possible-haut-droite (tab joueur x y)
      (if (and (> y 1) (< x 6))
	  (if (= (adversaire joueur) (aref tab (+ x 1) (- y 1)))
	      (do ((i (+ x 1) (+ i 1))(j (- y 1) (- j 1)))
		  ((or (= 7 i) (= 0 j)))
		(if (= (aref tab i j) joueur)
		    (return T)
		    (if (case-vide tab i j)
			NIL)))
	      NIL)
	  NIL))

                                                        ;;;
                                                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun jouer-coup (tab joueur x y)
  (assert (coup-valide tab joueur x y))
  (setf (aref tab x y) joueur)
  (prise tab joueur x y)
  (show-tab tab)
)

(defun prise (tab joueur x y)
;droite
  (if (prise-possible-droite tab joueur x y)
      (do ((i (+ 1 x) (+ 1 i)))((> i 6))
	(if (= (aref tab i y) (adversaire joueur))
	    (setf (aref tab i y) joueur)
	    (setf i 7))))
;gauche
  (if (prise-possible-gauche tab joueur x y)
      (do ((i (- x 1) (- i 1)))((< i 1))
	(if (= (aref tab i y) (adversaire joueur))
	    (setf (aref tab i y) joueur)
	    (setf i 0)
	    )))
;haut
 (if (prise-possible-haut tab joueur x y)
     (do ((i (- y 1) (- i 1)))((< i 1))
       (if (= (aref tab x i) joueur)
	   (setf i 0)
	   (setf (aref tab x i) joueur))))
;bas
  (if (prise-possible-bas tab joueur x y)
      (do ((i (+ 1 y) (+ i 1)))((> i 6))
	(if (= (aref tab x i) joueur)
	   (setf i 7)
	   (setf (aref tab x i) joueur)))) 
;bas droite
  (if (prise-possible-bas-droite tab joueur x y)
      (do ((i (+ 1 x) (+ i 1))(j (+ 1 y) (+ j 1)))
	  ((or (> i 6) (> j 6)))
	(if (= (aref tab i j) joueur)
	    (setf i 7)
	    (setf (aref tab i j) joueur)))) 
;bas gauche
  (if (prise-possible-bas-gauche tab joueur x y)
      (do ((i (- x 1) (- i 1))(j (+ y 1) (+ j 1)))
	  ((or (< i 1) (> j 6)))
	(if (= (aref tab i j) joueur)
	    (setf i 0)
	    (setf (aref tab i j) joueur)))) 
;haut gauche
  (if (prise-possible-haut-gauche tab joueur x y)
      (do ((i (- x 1) (- i 1))(j (- y 1) (- j 1)))
	  ((or (< i 1) (< j 1)))
	(if (= (aref tab i j) joueur)
	    (setf i 0)
	    (setf (aref tab i j) joueur)))) 
;haut droite
  (if (prise-possible-haut-droite tab joueur x y)
      (do ((i (+ x 1) (+ i 1))(j (- y 1) (- j 1)))
	  ((or (> i 6) (< j 1)))
	(if (= (aref tab i j) joueur)
	    (setf i 7)
	    (setf (aref tab i j) joueur)))))

(defun fin-partie (tab)
  (do ((i 0 (+ i 1)) (j 0 (+ j 1))) ((and (= i 7) (= j 7)))
    ((if (or (coup-valide tab 1 i j) (coup-valide tab 2 i j))
	(return nil))))
    T)


; jeu
(defun othello()
  (let ((tab (init-tab)) (l) (partiefinie NIL) (x 0) (y 0))
    (do ((i 0 (+ i 1))(partiefinie))
	((setf l (eval (read)))
	 (setf x (car l))
	 (setf y (cadr l))
	 (if (coup-valide tab (+ (mod i 2) 1) x y)
	     (jouer-coup tab (+ (mod i 2) 1) x y)
	     (progn 
	       (format t "Coup non valide ~%")
	       (setf i (+ i 1))))
	 (if (fin-partie tab)
	     (setf partiefinie T))))))
      
